// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dut,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.211000,HLS_SYN_LAT=125731,HLS_SYN_TPT=none,HLS_SYN_MEM=60,HLS_SYN_DSP=35,HLS_SYN_FF=8741,HLS_SYN_LUT=10431}" *)

module dut (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strm_in_V_V_dout,
        strm_in_V_V_empty_n,
        strm_in_V_V_read,
        strm_out_V_V_din,
        strm_out_V_V_full_n,
        strm_out_V_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] strm_in_V_V_dout;
input   strm_in_V_V_empty_n;
output   strm_in_V_V_read;
output  [31:0] strm_out_V_V_din;
input   strm_out_V_V_full_n;
output   strm_out_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg strm_in_V_V_read;
reg strm_out_V_V_write;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    strm_in_V_V_blk_n;
wire    ap_CS_fsm_state2;
reg    strm_out_V_V_blk_n;
wire    ap_CS_fsm_state5;
reg   [31:0] tmp_V_2_reg_157;
reg    ap_block_state1;
wire   [48:0] p_Result_s_fu_132_p3;
reg   [48:0] p_Result_s_reg_162;
wire   [9:0] i_2_fu_146_p2;
reg   [9:0] i_2_reg_170;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_140_p2;
reg   [9:0] result_address0;
reg    result_ce0;
reg    result_we0;
wire   [31:0] result_q0;
wire    grp_cnn_xcel_fu_114_ap_start;
wire    grp_cnn_xcel_fu_114_ap_done;
wire    grp_cnn_xcel_fu_114_ap_idle;
wire    grp_cnn_xcel_fu_114_ap_ready;
wire   [9:0] grp_cnn_xcel_fu_114_output_V_address0;
wire    grp_cnn_xcel_fu_114_output_V_ce0;
wire    grp_cnn_xcel_fu_114_output_V_we0;
wire   [31:0] grp_cnn_xcel_fu_114_output_V_d0;
reg   [9:0] i_reg_103;
wire    ap_CS_fsm_state3;
reg    grp_cnn_xcel_fu_114_ap_start_reg;
wire   [63:0] tmp_fu_152_p1;
wire   [16:0] tmp_61_fu_128_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_cnn_xcel_fu_114_ap_start_reg = 1'b0;
end

dut_result #(
    .DataWidth( 32 ),
    .AddressRange( 576 ),
    .AddressWidth( 10 ))
result_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(result_address0),
    .ce0(result_ce0),
    .we0(result_we0),
    .d0(grp_cnn_xcel_fu_114_output_V_d0),
    .q0(result_q0)
);

cnn_xcel grp_cnn_xcel_fu_114(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_cnn_xcel_fu_114_ap_start),
    .ap_done(grp_cnn_xcel_fu_114_ap_done),
    .ap_idle(grp_cnn_xcel_fu_114_ap_idle),
    .ap_ready(grp_cnn_xcel_fu_114_ap_ready),
    .input_V(p_Result_s_reg_162),
    .output_V_address0(grp_cnn_xcel_fu_114_output_V_address0),
    .output_V_ce0(grp_cnn_xcel_fu_114_output_V_ce0),
    .output_V_we0(grp_cnn_xcel_fu_114_output_V_we0),
    .output_V_d0(grp_cnn_xcel_fu_114_output_V_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_cnn_xcel_fu_114_ap_start_reg <= 1'b0;
    end else begin
        if (((strm_in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_cnn_xcel_fu_114_ap_start_reg <= 1'b1;
        end else if ((grp_cnn_xcel_fu_114_ap_ready == 1'b1)) begin
            grp_cnn_xcel_fu_114_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_103 <= i_2_reg_170;
    end else if (((grp_cnn_xcel_fu_114_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_103 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_2_reg_170 <= i_2_fu_146_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((strm_in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Result_s_reg_162 <= p_Result_s_fu_132_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((strm_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_2_reg_157 <= strm_in_V_V_dout;
    end
end

always @ (*) begin
    if (((exitcond_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        result_address0 = tmp_fu_152_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        result_address0 = grp_cnn_xcel_fu_114_output_V_address0;
    end else begin
        result_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        result_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        result_ce0 = grp_cnn_xcel_fu_114_output_V_ce0;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        result_we0 = grp_cnn_xcel_fu_114_output_V_we0;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        strm_in_V_V_blk_n = strm_in_V_V_empty_n;
    end else begin
        strm_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((strm_in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((strm_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        strm_in_V_V_read = 1'b1;
    end else begin
        strm_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        strm_out_V_V_blk_n = strm_out_V_V_full_n;
    end else begin
        strm_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        strm_out_V_V_write = 1'b1;
    end else begin
        strm_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((strm_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((strm_in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_cnn_xcel_fu_114_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((strm_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0));
end

assign exitcond_fu_140_p2 = ((i_reg_103 == 10'd576) ? 1'b1 : 1'b0);

assign grp_cnn_xcel_fu_114_ap_start = grp_cnn_xcel_fu_114_ap_start_reg;

assign i_2_fu_146_p2 = (i_reg_103 + 10'd1);

assign p_Result_s_fu_132_p3 = {{tmp_61_fu_128_p1}, {tmp_V_2_reg_157}};

assign strm_out_V_V_din = result_q0;

assign tmp_61_fu_128_p1 = strm_in_V_V_dout[16:0];

assign tmp_fu_152_p1 = i_reg_103;

endmodule //dut
