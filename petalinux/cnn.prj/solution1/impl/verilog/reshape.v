// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reshape (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_V_address0;
output   input_V_ce0;
input  [13:0] input_V_q0;
output  [9:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [13:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] c_cast8_cast_fu_100_p1;
reg   [11:0] c_cast8_cast_reg_279;
wire    ap_CS_fsm_state2;
wire   [6:0] c_1_fu_110_p2;
reg   [6:0] c_1_reg_287;
wire   [10:0] tmp1_cast_fu_138_p1;
reg   [10:0] tmp1_cast_reg_292;
wire   [0:0] exitcond3_fu_104_p2;
wire   [1:0] y_1_fu_152_p2;
reg   [1:0] y_1_reg_300;
wire    ap_CS_fsm_state3;
wire   [4:0] tmp_4_fu_198_p2;
reg   [4:0] tmp_4_reg_305;
wire   [0:0] exitcond2_fu_146_p2;
wire   [4:0] tmp_6_fu_204_p2;
reg   [4:0] tmp_6_reg_310;
wire   [1:0] x_1_fu_220_p2;
reg   [1:0] x_1_reg_318;
wire    ap_CS_fsm_state4;
wire   [11:0] o_index_fu_243_p2;
reg   [11:0] o_index_reg_323;
wire   [0:0] exitcond_fu_214_p2;
reg   [6:0] c_reg_63;
reg   [1:0] y_reg_74;
reg   [1:0] x_reg_85;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_1_fu_266_p1;
wire   [63:0] tmp_s_fu_274_p1;
wire   [5:0] tmp_fu_116_p1;
wire   [8:0] p_shl_fu_120_p3;
wire   [9:0] c_cast9_fu_96_p1;
wire   [9:0] p_shl_cast_fu_128_p1;
wire   [9:0] tmp1_fu_132_p2;
wire   [1:0] tmp_2_fu_158_p2;
wire   [3:0] p_shl6_fu_168_p3;
wire   [4:0] p_shl6_cast_fu_176_p1;
wire   [4:0] tmp_2_cast4_fu_164_p1;
wire   [3:0] p_shl5_fu_186_p3;
wire   [4:0] p_shl5_cast_fu_194_p1;
wire   [4:0] y_cast6_fu_142_p1;
wire   [4:0] tmp_3_fu_180_p2;
wire   [4:0] x_cast3_fu_210_p1;
wire   [4:0] tmp_7_fu_226_p2;
wire   [10:0] tmp_5_fu_231_p3;
wire  signed [11:0] tmp_8_cast_fu_239_p1;
wire   [4:0] tmp2_fu_248_p2;
wire  signed [10:0] tmp2_cast_fu_253_p1;
wire   [10:0] i_index_fu_257_p2;
wire  signed [31:0] i_index_cast_fu_262_p1;
wire  signed [31:0] o_index_cast_fu_271_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        c_reg_63 <= c_1_reg_287;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_reg_63 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        x_reg_85 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_reg_85 <= x_1_reg_318;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        y_reg_74 <= y_1_reg_300;
    end else if (((exitcond3_fu_104_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_reg_74 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_1_reg_287 <= c_1_fu_110_p2;
        c_cast8_cast_reg_279[6 : 0] <= c_cast8_cast_fu_100_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        o_index_reg_323 <= o_index_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_104_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp1_cast_reg_292[9 : 0] <= tmp1_cast_fu_138_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_4_reg_305 <= tmp_4_fu_198_p2;
        tmp_6_reg_310 <= tmp_6_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_1_reg_318 <= x_1_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_1_reg_300 <= y_1_fu_152_p2;
    end
end

always @ (*) begin
    if ((((exitcond3_fu_104_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_104_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_104_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign c_1_fu_110_p2 = (c_reg_63 + 7'd1);

assign c_cast8_cast_fu_100_p1 = c_reg_63;

assign c_cast9_fu_96_p1 = c_reg_63;

assign exitcond2_fu_146_p2 = ((y_reg_74 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond3_fu_104_p2 = ((c_reg_63 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond_fu_214_p2 = ((x_reg_85 == 2'd3) ? 1'b1 : 1'b0);

assign i_index_cast_fu_262_p1 = $signed(i_index_fu_257_p2);

assign i_index_fu_257_p2 = ($signed(tmp1_cast_reg_292) + $signed(tmp2_cast_fu_253_p1));

assign input_V_address0 = tmp_1_fu_266_p1;

assign o_index_cast_fu_271_p1 = $signed(o_index_reg_323);

assign o_index_fu_243_p2 = ($signed(tmp_8_cast_fu_239_p1) + $signed(c_cast8_cast_reg_279));

assign output_V_address0 = tmp_s_fu_274_p1;

assign output_V_d0 = input_V_q0;

assign p_shl5_cast_fu_194_p1 = p_shl5_fu_186_p3;

assign p_shl5_fu_186_p3 = {{y_reg_74}, {2'd0}};

assign p_shl6_cast_fu_176_p1 = p_shl6_fu_168_p3;

assign p_shl6_fu_168_p3 = {{tmp_2_fu_158_p2}, {2'd0}};

assign p_shl_cast_fu_128_p1 = p_shl_fu_120_p3;

assign p_shl_fu_120_p3 = {{tmp_fu_116_p1}, {3'd0}};

assign tmp1_cast_fu_138_p1 = tmp1_fu_132_p2;

assign tmp1_fu_132_p2 = (c_cast9_fu_96_p1 + p_shl_cast_fu_128_p1);

assign tmp2_cast_fu_253_p1 = $signed(tmp2_fu_248_p2);

assign tmp2_fu_248_p2 = (x_cast3_fu_210_p1 + tmp_4_reg_305);

assign tmp_1_fu_266_p1 = $unsigned(i_index_cast_fu_262_p1);

assign tmp_2_cast4_fu_164_p1 = tmp_2_fu_158_p2;

assign tmp_2_fu_158_p2 = ($signed(2'd2) - $signed(y_reg_74));

assign tmp_3_fu_180_p2 = (p_shl6_cast_fu_176_p1 - tmp_2_cast4_fu_164_p1);

assign tmp_4_fu_198_p2 = (p_shl5_cast_fu_194_p1 - y_cast6_fu_142_p1);

assign tmp_5_fu_231_p3 = {{tmp_7_fu_226_p2}, {6'd0}};

assign tmp_6_fu_204_p2 = (tmp_3_fu_180_p2 + 5'd2);

assign tmp_7_fu_226_p2 = (tmp_6_reg_310 - x_cast3_fu_210_p1);

assign tmp_8_cast_fu_239_p1 = $signed(tmp_5_fu_231_p3);

assign tmp_fu_116_p1 = c_reg_63[5:0];

assign tmp_s_fu_274_p1 = $unsigned(o_index_cast_fu_271_p1);

assign x_1_fu_220_p2 = (x_reg_85 + 2'd1);

assign x_cast3_fu_210_p1 = x_reg_85;

assign y_1_fu_152_p2 = (y_reg_74 + 2'd1);

assign y_cast6_fu_142_p1 = y_reg_74;

always @ (posedge ap_clk) begin
    c_cast8_cast_reg_279[11:7] <= 5'b00000;
    tmp1_cast_reg_292[10] <= 1'b0;
end

endmodule //reshape
