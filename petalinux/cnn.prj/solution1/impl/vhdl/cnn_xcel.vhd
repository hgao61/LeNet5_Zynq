-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_xcel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V : IN STD_LOGIC_VECTOR (48 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cnn_xcel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv13_56 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_9E : STD_LOGIC_VECTOR (7 downto 0) := "10011110";
    constant ap_const_lv8_74 : STD_LOGIC_VECTOR (7 downto 0) := "01110100";
    constant ap_const_lv8_73 : STD_LOGIC_VECTOR (7 downto 0) := "01110011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_307_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_335_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond5_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_urem_fu_370_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_3_fu_384_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_reg_626 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_22_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_reg_631 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reshape_output_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_s_reg_641 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal is_neg_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Val2_5_fu_413_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_5_reg_659 : STD_LOGIC_VECTOR (13 downto 0);
    signal msb_idx_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal msb_idx_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_fu_451_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_65_reg_670 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_66_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_3_fu_527_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_3_reg_680 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp32_V_6_fu_535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_6_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_29_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_690 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_conv1_0_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mem_conv1_0_V_ce0 : STD_LOGIC;
    signal mem_conv1_0_V_we0 : STD_LOGIC;
    signal mem_conv1_0_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mem_conv1_0_V_ce1 : STD_LOGIC;
    signal mem_conv1_0_V_q1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mem_conv1_1_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mem_conv1_1_V_ce0 : STD_LOGIC;
    signal mem_conv1_1_V_we0 : STD_LOGIC;
    signal mem_conv1_1_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mem_conv1_1_V_ce1 : STD_LOGIC;
    signal mem_conv1_1_V_q1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mem_conv1_2_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mem_conv1_2_V_ce0 : STD_LOGIC;
    signal mem_conv1_2_V_we0 : STD_LOGIC;
    signal mem_conv1_2_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mem_conv1_2_V_ce1 : STD_LOGIC;
    signal mem_conv1_2_V_q1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mem_conv2_0_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_conv2_0_V_ce0 : STD_LOGIC;
    signal mem_conv2_0_V_we0 : STD_LOGIC;
    signal mem_conv2_0_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_conv2_0_V_ce1 : STD_LOGIC;
    signal mem_conv2_0_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_conv2_1_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_conv2_1_V_ce0 : STD_LOGIC;
    signal mem_conv2_1_V_we0 : STD_LOGIC;
    signal mem_conv2_1_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_conv2_1_V_ce1 : STD_LOGIC;
    signal mem_conv2_1_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_conv2_2_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_conv2_2_V_ce0 : STD_LOGIC;
    signal mem_conv2_2_V_we0 : STD_LOGIC;
    signal mem_conv2_2_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_conv2_2_V_ce1 : STD_LOGIC;
    signal mem_conv2_2_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_conv2_3_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_conv2_3_V_ce0 : STD_LOGIC;
    signal mem_conv2_3_V_we0 : STD_LOGIC;
    signal mem_conv2_3_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_conv2_3_V_ce1 : STD_LOGIC;
    signal mem_conv2_3_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_conv2_4_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_conv2_4_V_ce0 : STD_LOGIC;
    signal mem_conv2_4_V_we0 : STD_LOGIC;
    signal mem_conv2_4_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_conv2_4_V_ce1 : STD_LOGIC;
    signal mem_conv2_4_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_conv3_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mem_conv3_V_ce0 : STD_LOGIC;
    signal mem_conv3_V_we0 : STD_LOGIC;
    signal mem_conv3_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal reshape_output_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal reshape_output_V_ce0 : STD_LOGIC;
    signal reshape_output_V_we0 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_ap_start : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_ap_done : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_ap_idle : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_ap_ready : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_input_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_perform_conv_1_fu_258_input_V_ce0 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_input_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_perform_conv_1_fu_258_input_V_ce1 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_input_V1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_perform_conv_1_fu_258_input_V1_ce0 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_input_V1_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_perform_conv_1_fu_258_input_V1_ce1 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_input_V2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_perform_conv_1_fu_258_input_V2_ce0 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_input_V2_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_perform_conv_1_fu_258_input_V2_ce1 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_output_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_perform_conv_1_fu_258_output_V_ce0 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_output_V_we0 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_output_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_perform_conv_1_fu_258_output_V3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_perform_conv_1_fu_258_output_V3_ce0 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_output_V3_we0 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_output_V3_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_perform_conv_1_fu_258_output_V4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_perform_conv_1_fu_258_output_V4_ce0 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_output_V4_we0 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_output_V4_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_perform_conv_1_fu_258_output_V5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_perform_conv_1_fu_258_output_V5_ce0 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_output_V5_we0 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_output_V5_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_perform_conv_1_fu_258_output_V6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_perform_conv_1_fu_258_output_V6_ce0 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_output_V6_we0 : STD_LOGIC;
    signal grp_perform_conv_1_fu_258_output_V6_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_perform_conv_fu_274_ap_start : STD_LOGIC;
    signal grp_perform_conv_fu_274_ap_done : STD_LOGIC;
    signal grp_perform_conv_fu_274_ap_idle : STD_LOGIC;
    signal grp_perform_conv_fu_274_ap_ready : STD_LOGIC;
    signal grp_perform_conv_fu_274_input_0_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_perform_conv_fu_274_input_0_V_ce0 : STD_LOGIC;
    signal grp_perform_conv_fu_274_input_0_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_perform_conv_fu_274_input_0_V_ce1 : STD_LOGIC;
    signal grp_perform_conv_fu_274_input_1_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_perform_conv_fu_274_input_1_V_ce0 : STD_LOGIC;
    signal grp_perform_conv_fu_274_input_1_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_perform_conv_fu_274_input_1_V_ce1 : STD_LOGIC;
    signal grp_perform_conv_fu_274_input_2_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_perform_conv_fu_274_input_2_V_ce0 : STD_LOGIC;
    signal grp_perform_conv_fu_274_input_2_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_perform_conv_fu_274_input_2_V_ce1 : STD_LOGIC;
    signal grp_perform_conv_fu_274_input_3_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_perform_conv_fu_274_input_3_V_ce0 : STD_LOGIC;
    signal grp_perform_conv_fu_274_input_3_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_perform_conv_fu_274_input_3_V_ce1 : STD_LOGIC;
    signal grp_perform_conv_fu_274_input_4_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_perform_conv_fu_274_input_4_V_ce0 : STD_LOGIC;
    signal grp_perform_conv_fu_274_input_4_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_perform_conv_fu_274_input_4_V_ce1 : STD_LOGIC;
    signal grp_perform_conv_fu_274_output_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_perform_conv_fu_274_output_V_ce0 : STD_LOGIC;
    signal grp_perform_conv_fu_274_output_V_we0 : STD_LOGIC;
    signal grp_perform_conv_fu_274_output_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_reshape_fu_288_ap_start : STD_LOGIC;
    signal grp_reshape_fu_288_ap_done : STD_LOGIC;
    signal grp_reshape_fu_288_ap_idle : STD_LOGIC;
    signal grp_reshape_fu_288_ap_ready : STD_LOGIC;
    signal grp_reshape_fu_288_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_reshape_fu_288_input_V_ce0 : STD_LOGIC;
    signal grp_reshape_fu_288_output_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_reshape_fu_288_output_V_ce0 : STD_LOGIC;
    signal grp_reshape_fu_288_output_V_we0 : STD_LOGIC;
    signal grp_reshape_fu_288_output_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal bvh_d_index_reg_214 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul_reg_225 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_urem_reg_236 : STD_LOGIC_VECTOR (5 downto 0);
    signal i4_reg_247 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_perform_conv_1_fu_258_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_perform_conv_fu_274_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_reshape_fu_288_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal newIndex1_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_fu_331_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_320_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal index_assign_cast3_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_341_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal next_urem_fu_358_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_73_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_408_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_3_fu_419_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_4_fu_429_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_zeros_fu_437_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal msb_idx_1_fu_463_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_67_fu_473_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal msb_idx_1_cast_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_fu_489_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_fu_504_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_69_fu_508_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_70_fu_514_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_fu_518_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_1_fu_498_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_2_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_fu_539_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_cast_cast_fu_558_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_72_fu_555_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_2_trunc_fu_565_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_571_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_5_fu_578_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component perform_conv_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
        input_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_V_ce1 : OUT STD_LOGIC;
        input_V_q1 : IN STD_LOGIC_VECTOR (12 downto 0);
        input_V1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_V1_ce0 : OUT STD_LOGIC;
        input_V1_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
        input_V1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_V1_ce1 : OUT STD_LOGIC;
        input_V1_q1 : IN STD_LOGIC_VECTOR (12 downto 0);
        input_V2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_V2_ce0 : OUT STD_LOGIC;
        input_V2_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
        input_V2_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_V2_ce1 : OUT STD_LOGIC;
        input_V2_q1 : IN STD_LOGIC_VECTOR (12 downto 0);
        output_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        output_V3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_V3_ce0 : OUT STD_LOGIC;
        output_V3_we0 : OUT STD_LOGIC;
        output_V3_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_V3_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        output_V4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_V4_ce0 : OUT STD_LOGIC;
        output_V4_we0 : OUT STD_LOGIC;
        output_V4_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_V4_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        output_V5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_V5_ce0 : OUT STD_LOGIC;
        output_V5_we0 : OUT STD_LOGIC;
        output_V5_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_V5_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        output_V6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_V6_ce0 : OUT STD_LOGIC;
        output_V6_we0 : OUT STD_LOGIC;
        output_V6_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_V6_q0 : IN STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component perform_conv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_0_V_ce0 : OUT STD_LOGIC;
        input_0_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        input_0_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_0_V_ce1 : OUT STD_LOGIC;
        input_0_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        input_1_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_1_V_ce0 : OUT STD_LOGIC;
        input_1_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        input_1_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_1_V_ce1 : OUT STD_LOGIC;
        input_1_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        input_2_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_2_V_ce0 : OUT STD_LOGIC;
        input_2_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        input_2_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_2_V_ce1 : OUT STD_LOGIC;
        input_2_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        input_3_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_3_V_ce0 : OUT STD_LOGIC;
        input_3_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        input_3_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_3_V_ce1 : OUT STD_LOGIC;
        input_3_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        input_4_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_4_V_ce0 : OUT STD_LOGIC;
        input_4_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        input_4_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_4_V_ce1 : OUT STD_LOGIC;
        input_4_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        output_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component reshape IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        output_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component dut_uitofp_32ns_3Aem IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_xcel_mem_convqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (12 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cnn_xcel_mem_convsc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (12 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cnn_xcel_mem_convtde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_xcel_mem_convyd2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    mem_conv1_0_V_U : component cnn_xcel_mem_convqcK
    generic map (
        DataWidth => 13,
        AddressRange => 267,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv1_0_V_address0,
        ce0 => mem_conv1_0_V_ce0,
        we0 => mem_conv1_0_V_we0,
        d0 => tmp_s_fu_320_p3,
        q0 => mem_conv1_0_V_q0,
        address1 => grp_perform_conv_1_fu_258_input_V_address1,
        ce1 => mem_conv1_0_V_ce1,
        q1 => mem_conv1_0_V_q1);

    mem_conv1_1_V_U : component cnn_xcel_mem_convqcK
    generic map (
        DataWidth => 13,
        AddressRange => 267,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv1_1_V_address0,
        ce0 => mem_conv1_1_V_ce0,
        we0 => mem_conv1_1_V_we0,
        d0 => tmp_s_fu_320_p3,
        q0 => mem_conv1_1_V_q0,
        address1 => grp_perform_conv_1_fu_258_input_V1_address1,
        ce1 => mem_conv1_1_V_ce1,
        q1 => mem_conv1_1_V_q1);

    mem_conv1_2_V_U : component cnn_xcel_mem_convsc4
    generic map (
        DataWidth => 13,
        AddressRange => 266,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv1_2_V_address0,
        ce0 => mem_conv1_2_V_ce0,
        we0 => mem_conv1_2_V_we0,
        d0 => tmp_s_fu_320_p3,
        q0 => mem_conv1_2_V_q0,
        address1 => grp_perform_conv_1_fu_258_input_V2_address1,
        ce1 => mem_conv1_2_V_ce1,
        q1 => mem_conv1_2_V_q1);

    mem_conv2_0_V_U : component cnn_xcel_mem_convtde
    generic map (
        DataWidth => 14,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv2_0_V_address0,
        ce0 => mem_conv2_0_V_ce0,
        we0 => mem_conv2_0_V_we0,
        d0 => grp_perform_conv_1_fu_258_output_V_d0,
        q0 => mem_conv2_0_V_q0,
        address1 => grp_perform_conv_fu_274_input_0_V_address1,
        ce1 => mem_conv2_0_V_ce1,
        q1 => mem_conv2_0_V_q1);

    mem_conv2_1_V_U : component cnn_xcel_mem_convtde
    generic map (
        DataWidth => 14,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv2_1_V_address0,
        ce0 => mem_conv2_1_V_ce0,
        we0 => mem_conv2_1_V_we0,
        d0 => grp_perform_conv_1_fu_258_output_V3_d0,
        q0 => mem_conv2_1_V_q0,
        address1 => grp_perform_conv_fu_274_input_1_V_address1,
        ce1 => mem_conv2_1_V_ce1,
        q1 => mem_conv2_1_V_q1);

    mem_conv2_2_V_U : component cnn_xcel_mem_convtde
    generic map (
        DataWidth => 14,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv2_2_V_address0,
        ce0 => mem_conv2_2_V_ce0,
        we0 => mem_conv2_2_V_we0,
        d0 => grp_perform_conv_1_fu_258_output_V4_d0,
        q0 => mem_conv2_2_V_q0,
        address1 => grp_perform_conv_fu_274_input_2_V_address1,
        ce1 => mem_conv2_2_V_ce1,
        q1 => mem_conv2_2_V_q1);

    mem_conv2_3_V_U : component cnn_xcel_mem_convtde
    generic map (
        DataWidth => 14,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv2_3_V_address0,
        ce0 => mem_conv2_3_V_ce0,
        we0 => mem_conv2_3_V_we0,
        d0 => grp_perform_conv_1_fu_258_output_V5_d0,
        q0 => mem_conv2_3_V_q0,
        address1 => grp_perform_conv_fu_274_input_3_V_address1,
        ce1 => mem_conv2_3_V_ce1,
        q1 => mem_conv2_3_V_q1);

    mem_conv2_4_V_U : component cnn_xcel_mem_convtde
    generic map (
        DataWidth => 14,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv2_4_V_address0,
        ce0 => mem_conv2_4_V_ce0,
        we0 => mem_conv2_4_V_we0,
        d0 => grp_perform_conv_1_fu_258_output_V6_d0,
        q0 => mem_conv2_4_V_q0,
        address1 => grp_perform_conv_fu_274_input_4_V_address1,
        ce1 => mem_conv2_4_V_ce1,
        q1 => mem_conv2_4_V_q1);

    mem_conv3_V_U : component cnn_xcel_mem_convyd2
    generic map (
        DataWidth => 14,
        AddressRange => 576,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv3_V_address0,
        ce0 => mem_conv3_V_ce0,
        we0 => mem_conv3_V_we0,
        d0 => grp_perform_conv_fu_274_output_V_d0,
        q0 => mem_conv3_V_q0);

    reshape_output_V_U : component cnn_xcel_mem_convyd2
    generic map (
        DataWidth => 14,
        AddressRange => 576,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => reshape_output_V_address0,
        ce0 => reshape_output_V_ce0,
        we0 => reshape_output_V_we0,
        d0 => grp_reshape_fu_288_output_V_d0,
        q0 => reshape_output_V_q0);

    grp_perform_conv_1_fu_258 : component perform_conv_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_perform_conv_1_fu_258_ap_start,
        ap_done => grp_perform_conv_1_fu_258_ap_done,
        ap_idle => grp_perform_conv_1_fu_258_ap_idle,
        ap_ready => grp_perform_conv_1_fu_258_ap_ready,
        input_V_address0 => grp_perform_conv_1_fu_258_input_V_address0,
        input_V_ce0 => grp_perform_conv_1_fu_258_input_V_ce0,
        input_V_q0 => mem_conv1_0_V_q0,
        input_V_address1 => grp_perform_conv_1_fu_258_input_V_address1,
        input_V_ce1 => grp_perform_conv_1_fu_258_input_V_ce1,
        input_V_q1 => mem_conv1_0_V_q1,
        input_V1_address0 => grp_perform_conv_1_fu_258_input_V1_address0,
        input_V1_ce0 => grp_perform_conv_1_fu_258_input_V1_ce0,
        input_V1_q0 => mem_conv1_1_V_q0,
        input_V1_address1 => grp_perform_conv_1_fu_258_input_V1_address1,
        input_V1_ce1 => grp_perform_conv_1_fu_258_input_V1_ce1,
        input_V1_q1 => mem_conv1_1_V_q1,
        input_V2_address0 => grp_perform_conv_1_fu_258_input_V2_address0,
        input_V2_ce0 => grp_perform_conv_1_fu_258_input_V2_ce0,
        input_V2_q0 => mem_conv1_2_V_q0,
        input_V2_address1 => grp_perform_conv_1_fu_258_input_V2_address1,
        input_V2_ce1 => grp_perform_conv_1_fu_258_input_V2_ce1,
        input_V2_q1 => mem_conv1_2_V_q1,
        output_V_address0 => grp_perform_conv_1_fu_258_output_V_address0,
        output_V_ce0 => grp_perform_conv_1_fu_258_output_V_ce0,
        output_V_we0 => grp_perform_conv_1_fu_258_output_V_we0,
        output_V_d0 => grp_perform_conv_1_fu_258_output_V_d0,
        output_V_q0 => mem_conv2_0_V_q0,
        output_V3_address0 => grp_perform_conv_1_fu_258_output_V3_address0,
        output_V3_ce0 => grp_perform_conv_1_fu_258_output_V3_ce0,
        output_V3_we0 => grp_perform_conv_1_fu_258_output_V3_we0,
        output_V3_d0 => grp_perform_conv_1_fu_258_output_V3_d0,
        output_V3_q0 => mem_conv2_1_V_q0,
        output_V4_address0 => grp_perform_conv_1_fu_258_output_V4_address0,
        output_V4_ce0 => grp_perform_conv_1_fu_258_output_V4_ce0,
        output_V4_we0 => grp_perform_conv_1_fu_258_output_V4_we0,
        output_V4_d0 => grp_perform_conv_1_fu_258_output_V4_d0,
        output_V4_q0 => mem_conv2_2_V_q0,
        output_V5_address0 => grp_perform_conv_1_fu_258_output_V5_address0,
        output_V5_ce0 => grp_perform_conv_1_fu_258_output_V5_ce0,
        output_V5_we0 => grp_perform_conv_1_fu_258_output_V5_we0,
        output_V5_d0 => grp_perform_conv_1_fu_258_output_V5_d0,
        output_V5_q0 => mem_conv2_3_V_q0,
        output_V6_address0 => grp_perform_conv_1_fu_258_output_V6_address0,
        output_V6_ce0 => grp_perform_conv_1_fu_258_output_V6_ce0,
        output_V6_we0 => grp_perform_conv_1_fu_258_output_V6_we0,
        output_V6_d0 => grp_perform_conv_1_fu_258_output_V6_d0,
        output_V6_q0 => mem_conv2_4_V_q0);

    grp_perform_conv_fu_274 : component perform_conv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_perform_conv_fu_274_ap_start,
        ap_done => grp_perform_conv_fu_274_ap_done,
        ap_idle => grp_perform_conv_fu_274_ap_idle,
        ap_ready => grp_perform_conv_fu_274_ap_ready,
        input_0_V_address0 => grp_perform_conv_fu_274_input_0_V_address0,
        input_0_V_ce0 => grp_perform_conv_fu_274_input_0_V_ce0,
        input_0_V_q0 => mem_conv2_0_V_q0,
        input_0_V_address1 => grp_perform_conv_fu_274_input_0_V_address1,
        input_0_V_ce1 => grp_perform_conv_fu_274_input_0_V_ce1,
        input_0_V_q1 => mem_conv2_0_V_q1,
        input_1_V_address0 => grp_perform_conv_fu_274_input_1_V_address0,
        input_1_V_ce0 => grp_perform_conv_fu_274_input_1_V_ce0,
        input_1_V_q0 => mem_conv2_1_V_q0,
        input_1_V_address1 => grp_perform_conv_fu_274_input_1_V_address1,
        input_1_V_ce1 => grp_perform_conv_fu_274_input_1_V_ce1,
        input_1_V_q1 => mem_conv2_1_V_q1,
        input_2_V_address0 => grp_perform_conv_fu_274_input_2_V_address0,
        input_2_V_ce0 => grp_perform_conv_fu_274_input_2_V_ce0,
        input_2_V_q0 => mem_conv2_2_V_q0,
        input_2_V_address1 => grp_perform_conv_fu_274_input_2_V_address1,
        input_2_V_ce1 => grp_perform_conv_fu_274_input_2_V_ce1,
        input_2_V_q1 => mem_conv2_2_V_q1,
        input_3_V_address0 => grp_perform_conv_fu_274_input_3_V_address0,
        input_3_V_ce0 => grp_perform_conv_fu_274_input_3_V_ce0,
        input_3_V_q0 => mem_conv2_3_V_q0,
        input_3_V_address1 => grp_perform_conv_fu_274_input_3_V_address1,
        input_3_V_ce1 => grp_perform_conv_fu_274_input_3_V_ce1,
        input_3_V_q1 => mem_conv2_3_V_q1,
        input_4_V_address0 => grp_perform_conv_fu_274_input_4_V_address0,
        input_4_V_ce0 => grp_perform_conv_fu_274_input_4_V_ce0,
        input_4_V_q0 => mem_conv2_4_V_q0,
        input_4_V_address1 => grp_perform_conv_fu_274_input_4_V_address1,
        input_4_V_ce1 => grp_perform_conv_fu_274_input_4_V_ce1,
        input_4_V_q1 => mem_conv2_4_V_q1,
        output_V_address0 => grp_perform_conv_fu_274_output_V_address0,
        output_V_ce0 => grp_perform_conv_fu_274_output_V_ce0,
        output_V_we0 => grp_perform_conv_fu_274_output_V_we0,
        output_V_d0 => grp_perform_conv_fu_274_output_V_d0,
        output_V_q0 => mem_conv3_V_q0);

    grp_reshape_fu_288 : component reshape
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reshape_fu_288_ap_start,
        ap_done => grp_reshape_fu_288_ap_done,
        ap_idle => grp_reshape_fu_288_ap_idle,
        ap_ready => grp_reshape_fu_288_ap_ready,
        input_V_address0 => grp_reshape_fu_288_input_V_address0,
        input_V_ce0 => grp_reshape_fu_288_input_V_ce0,
        input_V_q0 => mem_conv3_V_q0,
        output_V_address0 => grp_reshape_fu_288_output_V_address0,
        output_V_ce0 => grp_reshape_fu_288_output_V_ce0,
        output_V_we0 => grp_reshape_fu_288_output_V_we0,
        output_V_d0 => grp_reshape_fu_288_output_V_d0);

    dut_uitofp_32ns_3Aem_U101 : component dut_uitofp_32ns_3Aem
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp32_V_3_reg_680,
        ce => ap_const_logic_1,
        dout => grp_fu_294_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_perform_conv_1_fu_258_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_perform_conv_1_fu_258_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond5_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_perform_conv_1_fu_258_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_perform_conv_1_fu_258_ap_ready = ap_const_logic_1)) then 
                    grp_perform_conv_1_fu_258_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_perform_conv_fu_274_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_perform_conv_fu_274_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_perform_conv_fu_274_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_perform_conv_fu_274_ap_ready = ap_const_logic_1)) then 
                    grp_perform_conv_fu_274_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reshape_fu_288_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reshape_fu_288_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_reshape_fu_288_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reshape_fu_288_ap_ready = ap_const_logic_1)) then 
                    grp_reshape_fu_288_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bvh_d_index_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                bvh_d_index_reg_214 <= ap_const_lv6_0;
            elsif (((exitcond5_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                bvh_d_index_reg_214 <= i_fu_307_p2;
            end if; 
        end if;
    end process;

    i4_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i4_reg_247 <= i_3_reg_626;
            elsif (((grp_reshape_fu_288_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i4_reg_247 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_225 <= ap_const_lv13_0;
            elsif (((exitcond5_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_225 <= next_mul_fu_335_p2;
            end if; 
        end if;
    end process;

    phi_urem_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_urem_reg_236 <= ap_const_lv6_0;
            elsif (((exitcond5_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_urem_reg_236 <= idx_urem_fu_370_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_3_reg_626 <= i_3_fu_384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                is_neg_reg_648 <= reshape_output_V_q0(13 downto 13);
                p_Val2_s_reg_641 <= reshape_output_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                msb_idx_reg_665 <= msb_idx_fu_445_p2;
                p_Val2_5_reg_659 <= p_Val2_5_fu_413_p3;
                tmp_23_reg_654 <= tmp_23_fu_403_p2;
                tmp_65_reg_670 <= tmp_65_fu_451_p1;
                tmp_66_reg_675 <= msb_idx_fu_445_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_23_reg_654 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tmp32_V_3_reg_680 <= tmp32_V_3_fu_527_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_23_reg_654 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                tmp32_V_6_reg_685 <= tmp32_V_6_fu_535_p1;
                tmp_29_reg_690 <= tmp_29_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    tmp_22_reg_631(9 downto 0) <= tmp_22_fu_390_p1(9 downto 0);
            end if;
        end if;
    end process;
    tmp_22_reg_631(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_301_p2, ap_CS_fsm_state8, exitcond_fu_378_p2, grp_perform_conv_1_fu_258_ap_done, grp_perform_conv_fu_274_ap_done, grp_reshape_fu_288_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond5_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_perform_conv_1_fu_258_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_perform_conv_fu_274_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_reshape_fu_288_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((exitcond_fu_378_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8, exitcond_fu_378_p2)
    begin
        if ((((exitcond_fu_378_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, exitcond_fu_378_p2)
    begin
        if (((exitcond_fu_378_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond5_fu_301_p2 <= "1" when (bvh_d_index_reg_214 = ap_const_lv6_31) else "0";
    exitcond_fu_378_p2 <= "1" when (i4_reg_247 = ap_const_lv10_240) else "0";
    grp_perform_conv_1_fu_258_ap_start <= grp_perform_conv_1_fu_258_ap_start_reg;
    grp_perform_conv_fu_274_ap_start <= grp_perform_conv_fu_274_ap_start_reg;
    grp_reshape_fu_288_ap_start <= grp_reshape_fu_288_ap_start_reg;
    i_3_fu_384_p2 <= std_logic_vector(unsigned(i4_reg_247) + unsigned(ap_const_lv10_1));
    i_fu_307_p2 <= std_logic_vector(unsigned(bvh_d_index_reg_214) + unsigned(ap_const_lv6_1));
    icmp_fu_483_p2 <= "1" when (tmp_67_fu_473_p4 = ap_const_lv26_0) else "0";
    idx_urem_fu_370_p3 <= 
        next_urem_fu_358_p2 when (tmp_73_fu_364_p2(0) = '1') else 
        ap_const_lv6_0;
    index_assign_cast3_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bvh_d_index_reg_214),32));

    mem_conv1_0_V_address0_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_301_p2, grp_perform_conv_1_fu_258_input_V_address0, ap_CS_fsm_state3, newIndex1_fu_351_p1, tmp_62_fu_331_p1)
    begin
        if (((exitcond5_fu_301_p2 = ap_const_lv1_0) and (tmp_62_fu_331_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mem_conv1_0_V_address0 <= newIndex1_fu_351_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv1_0_V_address0 <= grp_perform_conv_1_fu_258_input_V_address0;
        else 
            mem_conv1_0_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    mem_conv1_0_V_ce0_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_301_p2, grp_perform_conv_1_fu_258_input_V_ce0, ap_CS_fsm_state3, tmp_62_fu_331_p1)
    begin
        if (((exitcond5_fu_301_p2 = ap_const_lv1_0) and (tmp_62_fu_331_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mem_conv1_0_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv1_0_V_ce0 <= grp_perform_conv_1_fu_258_input_V_ce0;
        else 
            mem_conv1_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv1_0_V_ce1_assign_proc : process(grp_perform_conv_1_fu_258_input_V_ce1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv1_0_V_ce1 <= grp_perform_conv_1_fu_258_input_V_ce1;
        else 
            mem_conv1_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv1_0_V_we0_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_301_p2, tmp_62_fu_331_p1)
    begin
        if (((exitcond5_fu_301_p2 = ap_const_lv1_0) and (tmp_62_fu_331_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mem_conv1_0_V_we0 <= ap_const_logic_1;
        else 
            mem_conv1_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv1_1_V_address0_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_301_p2, grp_perform_conv_1_fu_258_input_V1_address0, ap_CS_fsm_state3, newIndex1_fu_351_p1, tmp_62_fu_331_p1)
    begin
        if (((exitcond5_fu_301_p2 = ap_const_lv1_0) and (tmp_62_fu_331_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mem_conv1_1_V_address0 <= newIndex1_fu_351_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv1_1_V_address0 <= grp_perform_conv_1_fu_258_input_V1_address0;
        else 
            mem_conv1_1_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    mem_conv1_1_V_ce0_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_301_p2, grp_perform_conv_1_fu_258_input_V1_ce0, ap_CS_fsm_state3, tmp_62_fu_331_p1)
    begin
        if (((exitcond5_fu_301_p2 = ap_const_lv1_0) and (tmp_62_fu_331_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mem_conv1_1_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv1_1_V_ce0 <= grp_perform_conv_1_fu_258_input_V1_ce0;
        else 
            mem_conv1_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv1_1_V_ce1_assign_proc : process(grp_perform_conv_1_fu_258_input_V1_ce1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv1_1_V_ce1 <= grp_perform_conv_1_fu_258_input_V1_ce1;
        else 
            mem_conv1_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv1_1_V_we0_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_301_p2, tmp_62_fu_331_p1)
    begin
        if (((exitcond5_fu_301_p2 = ap_const_lv1_0) and (tmp_62_fu_331_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mem_conv1_1_V_we0 <= ap_const_logic_1;
        else 
            mem_conv1_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv1_2_V_address0_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_301_p2, grp_perform_conv_1_fu_258_input_V2_address0, ap_CS_fsm_state3, newIndex1_fu_351_p1, tmp_62_fu_331_p1)
    begin
        if ((not((tmp_62_fu_331_p1 = ap_const_lv3_0)) and not((tmp_62_fu_331_p1 = ap_const_lv3_1)) and (exitcond5_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mem_conv1_2_V_address0 <= newIndex1_fu_351_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv1_2_V_address0 <= grp_perform_conv_1_fu_258_input_V2_address0;
        else 
            mem_conv1_2_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    mem_conv1_2_V_ce0_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_301_p2, grp_perform_conv_1_fu_258_input_V2_ce0, ap_CS_fsm_state3, tmp_62_fu_331_p1)
    begin
        if ((not((tmp_62_fu_331_p1 = ap_const_lv3_0)) and not((tmp_62_fu_331_p1 = ap_const_lv3_1)) and (exitcond5_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mem_conv1_2_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv1_2_V_ce0 <= grp_perform_conv_1_fu_258_input_V2_ce0;
        else 
            mem_conv1_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv1_2_V_ce1_assign_proc : process(grp_perform_conv_1_fu_258_input_V2_ce1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv1_2_V_ce1 <= grp_perform_conv_1_fu_258_input_V2_ce1;
        else 
            mem_conv1_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv1_2_V_we0_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_301_p2, tmp_62_fu_331_p1)
    begin
        if ((not((tmp_62_fu_331_p1 = ap_const_lv3_0)) and not((tmp_62_fu_331_p1 = ap_const_lv3_1)) and (exitcond5_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mem_conv1_2_V_we0 <= ap_const_logic_1;
        else 
            mem_conv1_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_0_V_address0_assign_proc : process(grp_perform_conv_1_fu_258_output_V_address0, grp_perform_conv_fu_274_input_0_V_address0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv2_0_V_address0 <= grp_perform_conv_fu_274_input_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv2_0_V_address0 <= grp_perform_conv_1_fu_258_output_V_address0;
        else 
            mem_conv2_0_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    mem_conv2_0_V_ce0_assign_proc : process(grp_perform_conv_1_fu_258_output_V_ce0, grp_perform_conv_fu_274_input_0_V_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv2_0_V_ce0 <= grp_perform_conv_fu_274_input_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv2_0_V_ce0 <= grp_perform_conv_1_fu_258_output_V_ce0;
        else 
            mem_conv2_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_0_V_ce1_assign_proc : process(grp_perform_conv_fu_274_input_0_V_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv2_0_V_ce1 <= grp_perform_conv_fu_274_input_0_V_ce1;
        else 
            mem_conv2_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_0_V_we0_assign_proc : process(grp_perform_conv_1_fu_258_output_V_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv2_0_V_we0 <= grp_perform_conv_1_fu_258_output_V_we0;
        else 
            mem_conv2_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_1_V_address0_assign_proc : process(grp_perform_conv_1_fu_258_output_V3_address0, grp_perform_conv_fu_274_input_1_V_address0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv2_1_V_address0 <= grp_perform_conv_fu_274_input_1_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv2_1_V_address0 <= grp_perform_conv_1_fu_258_output_V3_address0;
        else 
            mem_conv2_1_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    mem_conv2_1_V_ce0_assign_proc : process(grp_perform_conv_1_fu_258_output_V3_ce0, grp_perform_conv_fu_274_input_1_V_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv2_1_V_ce0 <= grp_perform_conv_fu_274_input_1_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv2_1_V_ce0 <= grp_perform_conv_1_fu_258_output_V3_ce0;
        else 
            mem_conv2_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_1_V_ce1_assign_proc : process(grp_perform_conv_fu_274_input_1_V_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv2_1_V_ce1 <= grp_perform_conv_fu_274_input_1_V_ce1;
        else 
            mem_conv2_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_1_V_we0_assign_proc : process(grp_perform_conv_1_fu_258_output_V3_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv2_1_V_we0 <= grp_perform_conv_1_fu_258_output_V3_we0;
        else 
            mem_conv2_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_2_V_address0_assign_proc : process(grp_perform_conv_1_fu_258_output_V4_address0, grp_perform_conv_fu_274_input_2_V_address0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv2_2_V_address0 <= grp_perform_conv_fu_274_input_2_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv2_2_V_address0 <= grp_perform_conv_1_fu_258_output_V4_address0;
        else 
            mem_conv2_2_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    mem_conv2_2_V_ce0_assign_proc : process(grp_perform_conv_1_fu_258_output_V4_ce0, grp_perform_conv_fu_274_input_2_V_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv2_2_V_ce0 <= grp_perform_conv_fu_274_input_2_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv2_2_V_ce0 <= grp_perform_conv_1_fu_258_output_V4_ce0;
        else 
            mem_conv2_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_2_V_ce1_assign_proc : process(grp_perform_conv_fu_274_input_2_V_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv2_2_V_ce1 <= grp_perform_conv_fu_274_input_2_V_ce1;
        else 
            mem_conv2_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_2_V_we0_assign_proc : process(grp_perform_conv_1_fu_258_output_V4_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv2_2_V_we0 <= grp_perform_conv_1_fu_258_output_V4_we0;
        else 
            mem_conv2_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_3_V_address0_assign_proc : process(grp_perform_conv_1_fu_258_output_V5_address0, grp_perform_conv_fu_274_input_3_V_address0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv2_3_V_address0 <= grp_perform_conv_fu_274_input_3_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv2_3_V_address0 <= grp_perform_conv_1_fu_258_output_V5_address0;
        else 
            mem_conv2_3_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    mem_conv2_3_V_ce0_assign_proc : process(grp_perform_conv_1_fu_258_output_V5_ce0, grp_perform_conv_fu_274_input_3_V_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv2_3_V_ce0 <= grp_perform_conv_fu_274_input_3_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv2_3_V_ce0 <= grp_perform_conv_1_fu_258_output_V5_ce0;
        else 
            mem_conv2_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_3_V_ce1_assign_proc : process(grp_perform_conv_fu_274_input_3_V_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv2_3_V_ce1 <= grp_perform_conv_fu_274_input_3_V_ce1;
        else 
            mem_conv2_3_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_3_V_we0_assign_proc : process(grp_perform_conv_1_fu_258_output_V5_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv2_3_V_we0 <= grp_perform_conv_1_fu_258_output_V5_we0;
        else 
            mem_conv2_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_4_V_address0_assign_proc : process(grp_perform_conv_1_fu_258_output_V6_address0, grp_perform_conv_fu_274_input_4_V_address0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv2_4_V_address0 <= grp_perform_conv_fu_274_input_4_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv2_4_V_address0 <= grp_perform_conv_1_fu_258_output_V6_address0;
        else 
            mem_conv2_4_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    mem_conv2_4_V_ce0_assign_proc : process(grp_perform_conv_1_fu_258_output_V6_ce0, grp_perform_conv_fu_274_input_4_V_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv2_4_V_ce0 <= grp_perform_conv_fu_274_input_4_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv2_4_V_ce0 <= grp_perform_conv_1_fu_258_output_V6_ce0;
        else 
            mem_conv2_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_4_V_ce1_assign_proc : process(grp_perform_conv_fu_274_input_4_V_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv2_4_V_ce1 <= grp_perform_conv_fu_274_input_4_V_ce1;
        else 
            mem_conv2_4_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_4_V_we0_assign_proc : process(grp_perform_conv_1_fu_258_output_V6_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_conv2_4_V_we0 <= grp_perform_conv_1_fu_258_output_V6_we0;
        else 
            mem_conv2_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv3_V_address0_assign_proc : process(grp_perform_conv_fu_274_output_V_address0, grp_reshape_fu_288_input_V_address0, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mem_conv3_V_address0 <= grp_reshape_fu_288_input_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv3_V_address0 <= grp_perform_conv_fu_274_output_V_address0;
        else 
            mem_conv3_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    mem_conv3_V_ce0_assign_proc : process(grp_perform_conv_fu_274_output_V_ce0, grp_reshape_fu_288_input_V_ce0, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mem_conv3_V_ce0 <= grp_reshape_fu_288_input_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv3_V_ce0 <= grp_perform_conv_fu_274_output_V_ce0;
        else 
            mem_conv3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv3_V_we0_assign_proc : process(grp_perform_conv_fu_274_output_V_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mem_conv3_V_we0 <= grp_perform_conv_fu_274_output_V_we0;
        else 
            mem_conv3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    msb_idx_1_cast_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(msb_idx_1_fu_463_p3),32));
    msb_idx_1_fu_463_p3 <= 
        ap_const_lv31_0 when (tmp_66_reg_675(0) = '1') else 
        tmp_65_reg_670;
    msb_idx_fu_445_p2 <= std_logic_vector(unsigned(ap_const_lv32_D) - unsigned(num_zeros_fu_437_p3));
    newIndex1_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_341_p4),64));
    next_mul_fu_335_p2 <= std_logic_vector(unsigned(ap_const_lv13_56) + unsigned(phi_mul_reg_225));
    next_urem_fu_358_p2 <= std_logic_vector(unsigned(phi_urem_reg_236) + unsigned(ap_const_lv6_1));
    
    num_zeros_fu_437_p3_proc : process(p_Result_4_fu_429_p3)
    begin
        num_zeros_fu_437_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_4_fu_429_p3(i) = '1' then
                num_zeros_fu_437_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    output_V_address0 <= tmp_22_reg_631(10 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        ap_const_lv32_0 when (tmp_23_reg_654(0) = '1') else 
        p_Result_5_fu_578_p5;

    output_V_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Repl2_2_trunc_fu_565_p2 <= std_logic_vector(unsigned(tmp1_cast_cast_fu_558_p3) + unsigned(tmp_72_fu_555_p1));
    
    p_Result_3_fu_419_p4_proc : process(p_Val2_5_fu_413_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable p_Result_3_fu_419_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_D(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := p_Val2_5_fu_413_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_D(4-1 downto 0)));
            for p_Result_3_fu_419_p4_i in 0 to 14-1 loop
                v0_cpy(p_Result_3_fu_419_p4_i) := p_Val2_5_fu_413_p3(14-1-p_Result_3_fu_419_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(14-1 downto 0)))));
        res_mask := res_mask(14-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_3_fu_419_p4 <= resvalue(14-1 downto 0);
    end process;

    p_Result_4_fu_429_p3 <= (ap_const_lv18_3FFFF & p_Result_3_fu_419_p4);
    p_Result_5_fu_578_p5 <= (tmp_31_fu_571_p3 & tmp32_V_6_reg_685(22 downto 0));
    p_Result_8_fu_539_p4 <= tmp32_V_6_fu_535_p1(30 downto 23);
    p_Result_s_fu_518_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_5_reg_659),to_integer(unsigned('0' & tmp_70_fu_514_p1(14-1 downto 0)))));
    p_Val2_5_fu_413_p3 <= 
        tmp_24_fu_408_p2 when (is_neg_reg_648(0) = '1') else 
        p_Val2_s_reg_641;

    reshape_output_V_address0_assign_proc : process(ap_CS_fsm_state8, tmp_22_fu_390_p1, grp_reshape_fu_288_output_V_address0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            reshape_output_V_address0 <= tmp_22_fu_390_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            reshape_output_V_address0 <= grp_reshape_fu_288_output_V_address0;
        else 
            reshape_output_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    reshape_output_V_ce0_assign_proc : process(ap_CS_fsm_state8, grp_reshape_fu_288_output_V_ce0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            reshape_output_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            reshape_output_V_ce0 <= grp_reshape_fu_288_output_V_ce0;
        else 
            reshape_output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    reshape_output_V_we0_assign_proc : process(grp_reshape_fu_288_output_V_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            reshape_output_V_we0 <= grp_reshape_fu_288_output_V_we0;
        else 
            reshape_output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_cast_fu_558_p3 <= 
        ap_const_lv8_74 when (tmp_29_reg_690(0) = '1') else 
        ap_const_lv8_73;
    tmp32_V_1_fu_498_p2 <= std_logic_vector(shift_left(unsigned(tmp32_V_fu_489_p1),to_integer(unsigned('0' & tmp_27_fu_492_p2(31-1 downto 0)))));
    tmp32_V_2_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_518_p2),32));
    tmp32_V_3_fu_527_p3 <= 
        tmp32_V_1_fu_498_p2 when (icmp_fu_483_p2(0) = '1') else 
        tmp32_V_2_fu_523_p1;
    tmp32_V_6_fu_535_p1 <= grp_fu_294_p1;
    tmp32_V_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_5_reg_659),32));
    tmp_22_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_247),64));
    tmp_23_fu_403_p2 <= "1" when (p_Val2_s_reg_641 = ap_const_lv14_0) else "0";
    tmp_24_fu_408_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(p_Val2_s_reg_641));
    tmp_27_fu_492_p2 <= std_logic_vector(unsigned(ap_const_lv32_1F) - unsigned(msb_idx_1_cast_fu_469_p1));
    tmp_29_fu_549_p2 <= "0" when (p_Result_8_fu_539_p4 = ap_const_lv8_9E) else "1";
    tmp_31_fu_571_p3 <= (is_neg_reg_648 & p_Repl2_2_trunc_fu_565_p2);
    tmp_62_fu_331_p1 <= phi_urem_reg_236(3 - 1 downto 0);
    tmp_63_fu_341_p4 <= phi_mul_reg_225(12 downto 8);
    tmp_65_fu_451_p1 <= msb_idx_fu_445_p2(31 - 1 downto 0);
    tmp_67_fu_473_p4 <= msb_idx_1_fu_463_p3(30 downto 5);
    tmp_68_fu_504_p1 <= msb_idx_1_fu_463_p3(4 - 1 downto 0);
    tmp_69_fu_508_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(tmp_68_fu_504_p1));
    tmp_70_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_508_p2),14));
    tmp_72_fu_555_p1 <= msb_idx_reg_665(8 - 1 downto 0);
    tmp_73_fu_364_p2 <= "1" when (unsigned(next_urem_fu_358_p2) < unsigned(ap_const_lv6_3)) else "0";
    tmp_fu_313_p3 <= input_V(to_integer(unsigned(index_assign_cast3_fu_297_p1)) downto to_integer(unsigned(index_assign_cast3_fu_297_p1))) when (to_integer(unsigned(index_assign_cast3_fu_297_p1))>= 0 and to_integer(unsigned(index_assign_cast3_fu_297_p1))<=48) else "-";
    tmp_s_fu_320_p3 <= (tmp_fu_313_p3 & ap_const_lv12_0);
end behav;
