-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    strm_in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    strm_in_V_V_empty_n : IN STD_LOGIC;
    strm_in_V_V_read : OUT STD_LOGIC;
    strm_out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    strm_out_V_V_full_n : IN STD_LOGIC;
    strm_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dut,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.211000,HLS_SYN_LAT=125731,HLS_SYN_TPT=none,HLS_SYN_MEM=60,HLS_SYN_DSP=35,HLS_SYN_FF=8741,HLS_SYN_LUT=10431}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal strm_in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal strm_out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_V_2_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_Result_s_fu_132_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Result_s_reg_162 : STD_LOGIC_VECTOR (48 downto 0);
    signal i_2_fu_146_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_reg_170 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal result_ce0 : STD_LOGIC;
    signal result_we0 : STD_LOGIC;
    signal result_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_xcel_fu_114_ap_start : STD_LOGIC;
    signal grp_cnn_xcel_fu_114_ap_done : STD_LOGIC;
    signal grp_cnn_xcel_fu_114_ap_idle : STD_LOGIC;
    signal grp_cnn_xcel_fu_114_ap_ready : STD_LOGIC;
    signal grp_cnn_xcel_fu_114_output_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_cnn_xcel_fu_114_output_V_ce0 : STD_LOGIC;
    signal grp_cnn_xcel_fu_114_output_V_we0 : STD_LOGIC;
    signal grp_cnn_xcel_fu_114_output_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_103 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_cnn_xcel_fu_114_ap_start_reg : STD_LOGIC := '0';
    signal tmp_fu_152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_128_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component cnn_xcel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V : IN STD_LOGIC_VECTOR (48 downto 0);
        output_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_result IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    result_U : component dut_result
    generic map (
        DataWidth => 32,
        AddressRange => 576,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => result_address0,
        ce0 => result_ce0,
        we0 => result_we0,
        d0 => grp_cnn_xcel_fu_114_output_V_d0,
        q0 => result_q0);

    grp_cnn_xcel_fu_114 : component cnn_xcel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cnn_xcel_fu_114_ap_start,
        ap_done => grp_cnn_xcel_fu_114_ap_done,
        ap_idle => grp_cnn_xcel_fu_114_ap_idle,
        ap_ready => grp_cnn_xcel_fu_114_ap_ready,
        input_V => p_Result_s_reg_162,
        output_V_address0 => grp_cnn_xcel_fu_114_output_V_address0,
        output_V_ce0 => grp_cnn_xcel_fu_114_output_V_ce0,
        output_V_we0 => grp_cnn_xcel_fu_114_output_V_we0,
        output_V_d0 => grp_cnn_xcel_fu_114_output_V_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_cnn_xcel_fu_114_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cnn_xcel_fu_114_ap_start_reg <= ap_const_logic_0;
            else
                if (((strm_in_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_cnn_xcel_fu_114_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cnn_xcel_fu_114_ap_ready = ap_const_logic_1)) then 
                    grp_cnn_xcel_fu_114_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_reg_103 <= i_2_reg_170;
            elsif (((grp_cnn_xcel_fu_114_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_103 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_2_reg_170 <= i_2_fu_146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((strm_in_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_Result_s_reg_162 <= p_Result_s_fu_132_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((strm_in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_V_2_reg_157 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, strm_in_V_V_empty_n, strm_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state4, exitcond_fu_140_p2, grp_cnn_xcel_fu_114_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((strm_in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((strm_in_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_cnn_xcel_fu_114_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(ap_start, strm_in_V_V_empty_n)
    begin
                ap_block_state1 <= ((strm_in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4, exitcond_fu_140_p2)
    begin
        if (((exitcond_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond_fu_140_p2)
    begin
        if (((exitcond_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_140_p2 <= "1" when (i_reg_103 = ap_const_lv10_240) else "0";
    grp_cnn_xcel_fu_114_ap_start <= grp_cnn_xcel_fu_114_ap_start_reg;
    i_2_fu_146_p2 <= std_logic_vector(unsigned(i_reg_103) + unsigned(ap_const_lv10_1));
    p_Result_s_fu_132_p3 <= (tmp_61_fu_128_p1 & tmp_V_2_reg_157);

    result_address0_assign_proc : process(ap_CS_fsm_state4, grp_cnn_xcel_fu_114_output_V_address0, ap_CS_fsm_state3, tmp_fu_152_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            result_address0 <= tmp_fu_152_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            result_address0 <= grp_cnn_xcel_fu_114_output_V_address0;
        else 
            result_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    result_ce0_assign_proc : process(ap_CS_fsm_state4, grp_cnn_xcel_fu_114_output_V_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            result_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            result_ce0 <= grp_cnn_xcel_fu_114_output_V_ce0;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_we0_assign_proc : process(grp_cnn_xcel_fu_114_output_V_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            result_we0 <= grp_cnn_xcel_fu_114_output_V_we0;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_V_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, strm_in_V_V_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            strm_in_V_V_blk_n <= strm_in_V_V_empty_n;
        else 
            strm_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_V_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, strm_in_V_V_empty_n, ap_CS_fsm_state2)
    begin
        if ((((strm_in_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((strm_in_V_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            strm_in_V_V_read <= ap_const_logic_1;
        else 
            strm_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    strm_out_V_V_blk_n_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            strm_out_V_V_blk_n <= strm_out_V_V_full_n;
        else 
            strm_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    strm_out_V_V_din <= result_q0;

    strm_out_V_V_write_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state5)
    begin
        if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            strm_out_V_V_write <= ap_const_logic_1;
        else 
            strm_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_61_fu_128_p1 <= strm_in_V_V_dout(17 - 1 downto 0);
    tmp_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_103),64));
end behav;
