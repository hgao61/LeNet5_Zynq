-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reshape is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of reshape is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c_cast8_cast_fu_100_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_cast8_cast_reg_279 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal c_1_fu_110_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_1_reg_287 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_cast_fu_138_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_cast_reg_292 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_152_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal y_1_reg_300 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_4_fu_198_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_305 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_204_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_reg_310 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_1_fu_220_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_1_reg_318 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal o_index_fu_243_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal o_index_reg_323 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_reg_63 : STD_LOGIC_VECTOR (6 downto 0);
    signal y_reg_74 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_reg_85 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_1_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_116_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_fu_120_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_cast9_fu_96_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_128_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_132_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_158_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl6_fu_168_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl6_cast_fu_176_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_cast4_fu_164_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl5_fu_186_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl5_cast_fu_194_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_cast6_fu_142_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_180_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_cast3_fu_210_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_226_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_231_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_cast_fu_239_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_fu_248_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp2_cast_fu_253_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_index_fu_257_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_index_cast_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_index_cast_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_63_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_reg_63 <= c_1_reg_287;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_63 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    x_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_reg_85 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                x_reg_85 <= x_1_reg_318;
            end if; 
        end if;
    end process;

    y_reg_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_reg_74 <= y_1_reg_300;
            elsif (((exitcond3_fu_104_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_reg_74 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                c_1_reg_287 <= c_1_fu_110_p2;
                    c_cast8_cast_reg_279(6 downto 0) <= c_cast8_cast_fu_100_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                o_index_reg_323 <= o_index_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_104_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp1_cast_reg_292(9 downto 0) <= tmp1_cast_fu_138_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_4_reg_305 <= tmp_4_fu_198_p2;
                tmp_6_reg_310 <= tmp_6_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                x_1_reg_318 <= x_1_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                y_1_reg_300 <= y_1_fu_152_p2;
            end if;
        end if;
    end process;
    c_cast8_cast_reg_279(11 downto 7) <= "00000";
    tmp1_cast_reg_292(10) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_104_p2, ap_CS_fsm_state3, exitcond2_fu_146_p2, ap_CS_fsm_state4, exitcond_fu_214_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_fu_214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_104_p2)
    begin
        if ((((exitcond3_fu_104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_104_p2)
    begin
        if (((exitcond3_fu_104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_110_p2 <= std_logic_vector(unsigned(c_reg_63) + unsigned(ap_const_lv7_1));
    c_cast8_cast_fu_100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_63),12));
    c_cast9_fu_96_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_63),10));
    exitcond2_fu_146_p2 <= "1" when (y_reg_74 = ap_const_lv2_3) else "0";
    exitcond3_fu_104_p2 <= "1" when (c_reg_63 = ap_const_lv7_40) else "0";
    exitcond_fu_214_p2 <= "1" when (x_reg_85 = ap_const_lv2_3) else "0";
        i_index_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_index_fu_257_p2),32));

    i_index_fu_257_p2 <= std_logic_vector(unsigned(tmp1_cast_reg_292) + unsigned(tmp2_cast_fu_253_p1));
    input_V_address0 <= tmp_1_fu_266_p1(10 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        o_index_cast_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(o_index_reg_323),32));

    o_index_fu_243_p2 <= std_logic_vector(signed(tmp_8_cast_fu_239_p1) + signed(c_cast8_cast_reg_279));
    output_V_address0 <= tmp_s_fu_274_p1(10 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= input_V_q0;

    output_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl5_cast_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_186_p3),5));
    p_shl5_fu_186_p3 <= (y_reg_74 & ap_const_lv2_0);
    p_shl6_cast_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_fu_168_p3),5));
    p_shl6_fu_168_p3 <= (tmp_2_fu_158_p2 & ap_const_lv2_0);
    p_shl_cast_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_120_p3),10));
    p_shl_fu_120_p3 <= (tmp_fu_116_p1 & ap_const_lv3_0);
    tmp1_cast_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_132_p2),11));
    tmp1_fu_132_p2 <= std_logic_vector(unsigned(c_cast9_fu_96_p1) + unsigned(p_shl_cast_fu_128_p1));
        tmp2_cast_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_248_p2),11));

    tmp2_fu_248_p2 <= std_logic_vector(unsigned(x_cast3_fu_210_p1) + unsigned(tmp_4_reg_305));
    tmp_1_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_index_cast_fu_262_p1),64));
    tmp_2_cast4_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_158_p2),5));
    tmp_2_fu_158_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(y_reg_74));
    tmp_3_fu_180_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_176_p1) - unsigned(tmp_2_cast4_fu_164_p1));
    tmp_4_fu_198_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_194_p1) - unsigned(y_cast6_fu_142_p1));
    tmp_5_fu_231_p3 <= (tmp_7_fu_226_p2 & ap_const_lv6_0);
    tmp_6_fu_204_p2 <= std_logic_vector(unsigned(tmp_3_fu_180_p2) + unsigned(ap_const_lv5_2));
    tmp_7_fu_226_p2 <= std_logic_vector(unsigned(tmp_6_reg_310) - unsigned(x_cast3_fu_210_p1));
        tmp_8_cast_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_231_p3),12));

    tmp_fu_116_p1 <= c_reg_63(6 - 1 downto 0);
    tmp_s_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_index_cast_fu_271_p1),64));
    x_1_fu_220_p2 <= std_logic_vector(unsigned(x_reg_85) + unsigned(ap_const_lv2_1));
    x_cast3_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_85),5));
    y_1_fu_152_p2 <= std_logic_vector(unsigned(y_reg_74) + unsigned(ap_const_lv2_1));
    y_cast6_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_74),5));
end behav;
