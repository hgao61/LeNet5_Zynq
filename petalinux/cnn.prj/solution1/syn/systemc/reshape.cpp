// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "reshape.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic reshape::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic reshape::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> reshape::ap_ST_fsm_state1 = "1";
const sc_lv<5> reshape::ap_ST_fsm_state2 = "10";
const sc_lv<5> reshape::ap_ST_fsm_state3 = "100";
const sc_lv<5> reshape::ap_ST_fsm_state4 = "1000";
const sc_lv<5> reshape::ap_ST_fsm_state5 = "10000";
const sc_lv<32> reshape::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> reshape::ap_const_lv32_1 = "1";
const sc_lv<1> reshape::ap_const_lv1_0 = "0";
const sc_lv<32> reshape::ap_const_lv32_2 = "10";
const sc_lv<32> reshape::ap_const_lv32_3 = "11";
const sc_lv<7> reshape::ap_const_lv7_0 = "0000000";
const sc_lv<1> reshape::ap_const_lv1_1 = "1";
const sc_lv<2> reshape::ap_const_lv2_0 = "00";
const sc_lv<32> reshape::ap_const_lv32_4 = "100";
const sc_lv<7> reshape::ap_const_lv7_40 = "1000000";
const sc_lv<7> reshape::ap_const_lv7_1 = "1";
const sc_lv<3> reshape::ap_const_lv3_0 = "000";
const sc_lv<2> reshape::ap_const_lv2_3 = "11";
const sc_lv<2> reshape::ap_const_lv2_1 = "1";
const sc_lv<2> reshape::ap_const_lv2_2 = "10";
const sc_lv<5> reshape::ap_const_lv5_2 = "10";
const sc_lv<6> reshape::ap_const_lv6_0 = "000000";
const bool reshape::ap_const_boolean_1 = true;

reshape::reshape(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_104_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_104_p2 );

    SC_METHOD(thread_c_1_fu_110_p2);
    sensitive << ( c_reg_63 );

    SC_METHOD(thread_c_cast8_cast_fu_100_p1);
    sensitive << ( c_reg_63 );

    SC_METHOD(thread_c_cast9_fu_96_p1);
    sensitive << ( c_reg_63 );

    SC_METHOD(thread_exitcond2_fu_146_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( y_reg_74 );

    SC_METHOD(thread_exitcond3_fu_104_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( c_reg_63 );

    SC_METHOD(thread_exitcond_fu_214_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( x_reg_85 );

    SC_METHOD(thread_i_index_cast_fu_262_p1);
    sensitive << ( i_index_fu_257_p2 );

    SC_METHOD(thread_i_index_fu_257_p2);
    sensitive << ( tmp1_cast_reg_292 );
    sensitive << ( tmp2_cast_fu_253_p1 );

    SC_METHOD(thread_input_V_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_1_fu_266_p1 );

    SC_METHOD(thread_input_V_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_o_index_cast_fu_271_p1);
    sensitive << ( o_index_reg_323 );

    SC_METHOD(thread_o_index_fu_243_p2);
    sensitive << ( c_cast8_cast_reg_279 );
    sensitive << ( tmp_8_cast_fu_239_p1 );

    SC_METHOD(thread_output_V_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_s_fu_274_p1 );

    SC_METHOD(thread_output_V_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_output_V_d0);
    sensitive << ( input_V_q0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_output_V_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_p_shl5_cast_fu_194_p1);
    sensitive << ( p_shl5_fu_186_p3 );

    SC_METHOD(thread_p_shl5_fu_186_p3);
    sensitive << ( y_reg_74 );

    SC_METHOD(thread_p_shl6_cast_fu_176_p1);
    sensitive << ( p_shl6_fu_168_p3 );

    SC_METHOD(thread_p_shl6_fu_168_p3);
    sensitive << ( tmp_2_fu_158_p2 );

    SC_METHOD(thread_p_shl_cast_fu_128_p1);
    sensitive << ( p_shl_fu_120_p3 );

    SC_METHOD(thread_p_shl_fu_120_p3);
    sensitive << ( tmp_fu_116_p1 );

    SC_METHOD(thread_tmp1_cast_fu_138_p1);
    sensitive << ( tmp1_fu_132_p2 );

    SC_METHOD(thread_tmp1_fu_132_p2);
    sensitive << ( c_cast9_fu_96_p1 );
    sensitive << ( p_shl_cast_fu_128_p1 );

    SC_METHOD(thread_tmp2_cast_fu_253_p1);
    sensitive << ( tmp2_fu_248_p2 );

    SC_METHOD(thread_tmp2_fu_248_p2);
    sensitive << ( tmp_4_reg_305 );
    sensitive << ( x_cast3_fu_210_p1 );

    SC_METHOD(thread_tmp_1_fu_266_p1);
    sensitive << ( i_index_cast_fu_262_p1 );

    SC_METHOD(thread_tmp_2_cast4_fu_164_p1);
    sensitive << ( tmp_2_fu_158_p2 );

    SC_METHOD(thread_tmp_2_fu_158_p2);
    sensitive << ( y_reg_74 );

    SC_METHOD(thread_tmp_3_fu_180_p2);
    sensitive << ( p_shl6_cast_fu_176_p1 );
    sensitive << ( tmp_2_cast4_fu_164_p1 );

    SC_METHOD(thread_tmp_4_fu_198_p2);
    sensitive << ( p_shl5_cast_fu_194_p1 );
    sensitive << ( y_cast6_fu_142_p1 );

    SC_METHOD(thread_tmp_5_fu_231_p3);
    sensitive << ( tmp_7_fu_226_p2 );

    SC_METHOD(thread_tmp_6_fu_204_p2);
    sensitive << ( tmp_3_fu_180_p2 );

    SC_METHOD(thread_tmp_7_fu_226_p2);
    sensitive << ( tmp_6_reg_310 );
    sensitive << ( x_cast3_fu_210_p1 );

    SC_METHOD(thread_tmp_8_cast_fu_239_p1);
    sensitive << ( tmp_5_fu_231_p3 );

    SC_METHOD(thread_tmp_fu_116_p1);
    sensitive << ( c_reg_63 );

    SC_METHOD(thread_tmp_s_fu_274_p1);
    sensitive << ( o_index_cast_fu_271_p1 );

    SC_METHOD(thread_x_1_fu_220_p2);
    sensitive << ( x_reg_85 );

    SC_METHOD(thread_x_cast3_fu_210_p1);
    sensitive << ( x_reg_85 );

    SC_METHOD(thread_y_1_fu_152_p2);
    sensitive << ( y_reg_74 );

    SC_METHOD(thread_y_cast6_fu_142_p1);
    sensitive << ( y_reg_74 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_104_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_fu_146_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_214_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "reshape_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_V_address0, "(port)input_V_address0");
    sc_trace(mVcdFile, input_V_ce0, "(port)input_V_ce0");
    sc_trace(mVcdFile, input_V_q0, "(port)input_V_q0");
    sc_trace(mVcdFile, output_V_address0, "(port)output_V_address0");
    sc_trace(mVcdFile, output_V_ce0, "(port)output_V_ce0");
    sc_trace(mVcdFile, output_V_we0, "(port)output_V_we0");
    sc_trace(mVcdFile, output_V_d0, "(port)output_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, c_cast8_cast_fu_100_p1, "c_cast8_cast_fu_100_p1");
    sc_trace(mVcdFile, c_cast8_cast_reg_279, "c_cast8_cast_reg_279");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, c_1_fu_110_p2, "c_1_fu_110_p2");
    sc_trace(mVcdFile, c_1_reg_287, "c_1_reg_287");
    sc_trace(mVcdFile, tmp1_cast_fu_138_p1, "tmp1_cast_fu_138_p1");
    sc_trace(mVcdFile, tmp1_cast_reg_292, "tmp1_cast_reg_292");
    sc_trace(mVcdFile, exitcond3_fu_104_p2, "exitcond3_fu_104_p2");
    sc_trace(mVcdFile, y_1_fu_152_p2, "y_1_fu_152_p2");
    sc_trace(mVcdFile, y_1_reg_300, "y_1_reg_300");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_4_fu_198_p2, "tmp_4_fu_198_p2");
    sc_trace(mVcdFile, tmp_4_reg_305, "tmp_4_reg_305");
    sc_trace(mVcdFile, exitcond2_fu_146_p2, "exitcond2_fu_146_p2");
    sc_trace(mVcdFile, tmp_6_fu_204_p2, "tmp_6_fu_204_p2");
    sc_trace(mVcdFile, tmp_6_reg_310, "tmp_6_reg_310");
    sc_trace(mVcdFile, x_1_fu_220_p2, "x_1_fu_220_p2");
    sc_trace(mVcdFile, x_1_reg_318, "x_1_reg_318");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, o_index_fu_243_p2, "o_index_fu_243_p2");
    sc_trace(mVcdFile, o_index_reg_323, "o_index_reg_323");
    sc_trace(mVcdFile, exitcond_fu_214_p2, "exitcond_fu_214_p2");
    sc_trace(mVcdFile, c_reg_63, "c_reg_63");
    sc_trace(mVcdFile, y_reg_74, "y_reg_74");
    sc_trace(mVcdFile, x_reg_85, "x_reg_85");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_1_fu_266_p1, "tmp_1_fu_266_p1");
    sc_trace(mVcdFile, tmp_s_fu_274_p1, "tmp_s_fu_274_p1");
    sc_trace(mVcdFile, tmp_fu_116_p1, "tmp_fu_116_p1");
    sc_trace(mVcdFile, p_shl_fu_120_p3, "p_shl_fu_120_p3");
    sc_trace(mVcdFile, c_cast9_fu_96_p1, "c_cast9_fu_96_p1");
    sc_trace(mVcdFile, p_shl_cast_fu_128_p1, "p_shl_cast_fu_128_p1");
    sc_trace(mVcdFile, tmp1_fu_132_p2, "tmp1_fu_132_p2");
    sc_trace(mVcdFile, tmp_2_fu_158_p2, "tmp_2_fu_158_p2");
    sc_trace(mVcdFile, p_shl6_fu_168_p3, "p_shl6_fu_168_p3");
    sc_trace(mVcdFile, p_shl6_cast_fu_176_p1, "p_shl6_cast_fu_176_p1");
    sc_trace(mVcdFile, tmp_2_cast4_fu_164_p1, "tmp_2_cast4_fu_164_p1");
    sc_trace(mVcdFile, p_shl5_fu_186_p3, "p_shl5_fu_186_p3");
    sc_trace(mVcdFile, p_shl5_cast_fu_194_p1, "p_shl5_cast_fu_194_p1");
    sc_trace(mVcdFile, y_cast6_fu_142_p1, "y_cast6_fu_142_p1");
    sc_trace(mVcdFile, tmp_3_fu_180_p2, "tmp_3_fu_180_p2");
    sc_trace(mVcdFile, x_cast3_fu_210_p1, "x_cast3_fu_210_p1");
    sc_trace(mVcdFile, tmp_7_fu_226_p2, "tmp_7_fu_226_p2");
    sc_trace(mVcdFile, tmp_5_fu_231_p3, "tmp_5_fu_231_p3");
    sc_trace(mVcdFile, tmp_8_cast_fu_239_p1, "tmp_8_cast_fu_239_p1");
    sc_trace(mVcdFile, tmp2_fu_248_p2, "tmp2_fu_248_p2");
    sc_trace(mVcdFile, tmp2_cast_fu_253_p1, "tmp2_cast_fu_253_p1");
    sc_trace(mVcdFile, i_index_fu_257_p2, "i_index_fu_257_p2");
    sc_trace(mVcdFile, i_index_cast_fu_262_p1, "i_index_cast_fu_262_p1");
    sc_trace(mVcdFile, o_index_cast_fu_271_p1, "o_index_cast_fu_271_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

reshape::~reshape() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void reshape::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_146_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        c_reg_63 = c_1_reg_287.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        c_reg_63 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_146_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        x_reg_85 = ap_const_lv2_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        x_reg_85 = x_1_reg_318.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_214_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        y_reg_74 = y_1_reg_300.read();
    } else if ((esl_seteq<1,1,1>(exitcond3_fu_104_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        y_reg_74 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        c_1_reg_287 = c_1_fu_110_p2.read();
        c_cast8_cast_reg_279 = c_cast8_cast_fu_100_p1.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_214_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        o_index_reg_323 = o_index_fu_243_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_104_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp1_cast_reg_292 = tmp1_cast_fu_138_p1.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_146_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        tmp_4_reg_305 = tmp_4_fu_198_p2.read();
        tmp_6_reg_310 = tmp_6_fu_204_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        x_1_reg_318 = x_1_fu_220_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        y_1_reg_300 = y_1_fu_152_p2.read();
    }
}

void reshape::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void reshape::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void reshape::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void reshape::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void reshape::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void reshape::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(exitcond3_fu_104_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void reshape::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void reshape::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond3_fu_104_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void reshape::thread_c_1_fu_110_p2() {
    c_1_fu_110_p2 = (!c_reg_63.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(c_reg_63.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void reshape::thread_c_cast8_cast_fu_100_p1() {
    c_cast8_cast_fu_100_p1 = esl_zext<12,7>(c_reg_63.read());
}

void reshape::thread_c_cast9_fu_96_p1() {
    c_cast9_fu_96_p1 = esl_zext<10,7>(c_reg_63.read());
}

void reshape::thread_exitcond2_fu_146_p2() {
    exitcond2_fu_146_p2 = (!y_reg_74.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(y_reg_74.read() == ap_const_lv2_3);
}

void reshape::thread_exitcond3_fu_104_p2() {
    exitcond3_fu_104_p2 = (!c_reg_63.read().is_01() || !ap_const_lv7_40.is_01())? sc_lv<1>(): sc_lv<1>(c_reg_63.read() == ap_const_lv7_40);
}

void reshape::thread_exitcond_fu_214_p2() {
    exitcond_fu_214_p2 = (!x_reg_85.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(x_reg_85.read() == ap_const_lv2_3);
}

void reshape::thread_i_index_cast_fu_262_p1() {
    i_index_cast_fu_262_p1 = esl_sext<32,11>(i_index_fu_257_p2.read());
}

void reshape::thread_i_index_fu_257_p2() {
    i_index_fu_257_p2 = (!tmp1_cast_reg_292.read().is_01() || !tmp2_cast_fu_253_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp1_cast_reg_292.read()) + sc_bigint<11>(tmp2_cast_fu_253_p1.read()));
}

void reshape::thread_input_V_address0() {
    input_V_address0 =  (sc_lv<10>) (tmp_1_fu_266_p1.read());
}

void reshape::thread_input_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        input_V_ce0 = ap_const_logic_1;
    } else {
        input_V_ce0 = ap_const_logic_0;
    }
}

void reshape::thread_o_index_cast_fu_271_p1() {
    o_index_cast_fu_271_p1 = esl_sext<32,12>(o_index_reg_323.read());
}

void reshape::thread_o_index_fu_243_p2() {
    o_index_fu_243_p2 = (!tmp_8_cast_fu_239_p1.read().is_01() || !c_cast8_cast_reg_279.read().is_01())? sc_lv<12>(): (sc_bigint<12>(tmp_8_cast_fu_239_p1.read()) + sc_biguint<12>(c_cast8_cast_reg_279.read()));
}

void reshape::thread_output_V_address0() {
    output_V_address0 =  (sc_lv<10>) (tmp_s_fu_274_p1.read());
}

void reshape::thread_output_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        output_V_ce0 = ap_const_logic_1;
    } else {
        output_V_ce0 = ap_const_logic_0;
    }
}

void reshape::thread_output_V_d0() {
    output_V_d0 = input_V_q0.read();
}

void reshape::thread_output_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        output_V_we0 = ap_const_logic_1;
    } else {
        output_V_we0 = ap_const_logic_0;
    }
}

void reshape::thread_p_shl5_cast_fu_194_p1() {
    p_shl5_cast_fu_194_p1 = esl_zext<5,4>(p_shl5_fu_186_p3.read());
}

void reshape::thread_p_shl5_fu_186_p3() {
    p_shl5_fu_186_p3 = esl_concat<2,2>(y_reg_74.read(), ap_const_lv2_0);
}

void reshape::thread_p_shl6_cast_fu_176_p1() {
    p_shl6_cast_fu_176_p1 = esl_zext<5,4>(p_shl6_fu_168_p3.read());
}

void reshape::thread_p_shl6_fu_168_p3() {
    p_shl6_fu_168_p3 = esl_concat<2,2>(tmp_2_fu_158_p2.read(), ap_const_lv2_0);
}

void reshape::thread_p_shl_cast_fu_128_p1() {
    p_shl_cast_fu_128_p1 = esl_zext<10,9>(p_shl_fu_120_p3.read());
}

void reshape::thread_p_shl_fu_120_p3() {
    p_shl_fu_120_p3 = esl_concat<6,3>(tmp_fu_116_p1.read(), ap_const_lv3_0);
}

void reshape::thread_tmp1_cast_fu_138_p1() {
    tmp1_cast_fu_138_p1 = esl_zext<11,10>(tmp1_fu_132_p2.read());
}

void reshape::thread_tmp1_fu_132_p2() {
    tmp1_fu_132_p2 = (!c_cast9_fu_96_p1.read().is_01() || !p_shl_cast_fu_128_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(c_cast9_fu_96_p1.read()) + sc_biguint<10>(p_shl_cast_fu_128_p1.read()));
}

void reshape::thread_tmp2_cast_fu_253_p1() {
    tmp2_cast_fu_253_p1 = esl_sext<11,5>(tmp2_fu_248_p2.read());
}

void reshape::thread_tmp2_fu_248_p2() {
    tmp2_fu_248_p2 = (!x_cast3_fu_210_p1.read().is_01() || !tmp_4_reg_305.read().is_01())? sc_lv<5>(): (sc_biguint<5>(x_cast3_fu_210_p1.read()) + sc_biguint<5>(tmp_4_reg_305.read()));
}

void reshape::thread_tmp_1_fu_266_p1() {
    tmp_1_fu_266_p1 = esl_zext<64,32>(i_index_cast_fu_262_p1.read());
}

void reshape::thread_tmp_2_cast4_fu_164_p1() {
    tmp_2_cast4_fu_164_p1 = esl_zext<5,2>(tmp_2_fu_158_p2.read());
}

void reshape::thread_tmp_2_fu_158_p2() {
    tmp_2_fu_158_p2 = (!ap_const_lv2_2.is_01() || !y_reg_74.read().is_01())? sc_lv<2>(): (sc_bigint<2>(ap_const_lv2_2) - sc_biguint<2>(y_reg_74.read()));
}

void reshape::thread_tmp_3_fu_180_p2() {
    tmp_3_fu_180_p2 = (!p_shl6_cast_fu_176_p1.read().is_01() || !tmp_2_cast4_fu_164_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_shl6_cast_fu_176_p1.read()) - sc_biguint<5>(tmp_2_cast4_fu_164_p1.read()));
}

void reshape::thread_tmp_4_fu_198_p2() {
    tmp_4_fu_198_p2 = (!p_shl5_cast_fu_194_p1.read().is_01() || !y_cast6_fu_142_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_shl5_cast_fu_194_p1.read()) - sc_biguint<5>(y_cast6_fu_142_p1.read()));
}

void reshape::thread_tmp_5_fu_231_p3() {
    tmp_5_fu_231_p3 = esl_concat<5,6>(tmp_7_fu_226_p2.read(), ap_const_lv6_0);
}

void reshape::thread_tmp_6_fu_204_p2() {
    tmp_6_fu_204_p2 = (!tmp_3_fu_180_p2.read().is_01() || !ap_const_lv5_2.is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_3_fu_180_p2.read()) + sc_biguint<5>(ap_const_lv5_2));
}

void reshape::thread_tmp_7_fu_226_p2() {
    tmp_7_fu_226_p2 = (!tmp_6_reg_310.read().is_01() || !x_cast3_fu_210_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_6_reg_310.read()) - sc_biguint<5>(x_cast3_fu_210_p1.read()));
}

void reshape::thread_tmp_8_cast_fu_239_p1() {
    tmp_8_cast_fu_239_p1 = esl_sext<12,11>(tmp_5_fu_231_p3.read());
}

void reshape::thread_tmp_fu_116_p1() {
    tmp_fu_116_p1 = c_reg_63.read().range(6-1, 0);
}

void reshape::thread_tmp_s_fu_274_p1() {
    tmp_s_fu_274_p1 = esl_zext<64,32>(o_index_cast_fu_271_p1.read());
}

void reshape::thread_x_1_fu_220_p2() {
    x_1_fu_220_p2 = (!x_reg_85.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(x_reg_85.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void reshape::thread_x_cast3_fu_210_p1() {
    x_cast3_fu_210_p1 = esl_zext<5,2>(x_reg_85.read());
}

void reshape::thread_y_1_fu_152_p2() {
    y_1_fu_152_p2 = (!y_reg_74.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(y_reg_74.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void reshape::thread_y_cast6_fu_142_p1() {
    y_cast6_fu_142_p1 = esl_zext<5,2>(y_reg_74.read());
}

void reshape::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond3_fu_104_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(exitcond2_fu_146_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_214_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

